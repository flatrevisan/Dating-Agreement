//SPDX-License-Identifier: CC-BY-4.0
pragma solidity 0.6.10;

contract RelationshipContract
{
    struct Lovers 
    {
        string name;
        address payable party;
    }
    
    address payable mainLover;
    string mainLoverName;
    address payable public lawyer;
    uint totalConsent;
    uint loversInvolved;
    uint fees;
    
    Lovers [] hooked;
    
    event consentDeclarationIssued (address, string);
    event statusCommitment (address, statuses);
    event changeStatusFailed (address,string);
    event feesReceived (address, uint256, string);
    
    enum statuses {Single, Dating}
    statuses currentStatus;
    
    constructor (
        address payable _mainLover, 
        string memory _mainLoverName,
        uint256 _loversInvolved) public
    
    {
        lawyer = 0x888cDa7b74D2364FfBA6c27FeFF2237501B85DF6;
        currentStatus = statuses.Single;
        mainLover = _mainLover;
        mainLoverName = _mainLoverName;
        loversInvolved = _loversInvolved;
    }
    
    modifier minimumLovers ()
    {  
        require (loversInvolved >= 1, "Not enough Parties to the Contract");
        _;
    }
    
    modifier costs ()
    {
        require (fees>= 500);
        _;
    }
    
    function identifyLovers (string memory _name, address payable _party) public costs 
    {
        require(msg.sender == mainLover, "Only one of the Parties is responsible for informing the other's name and address.");
        Lovers memory storeLovers = Lovers (_name, _party);
        hooked.push(storeLovers);
    }
    
    
    function commitment (uint _consent1, uint _consent2) payable public minimumLovers costs
    {
        uint consent1;
        if (_consent1 == 1) 
        {
            consent1 = consent1 + 1;
            emit consentDeclarationIssued(msg.sender, "You just accepted the commitment to date!");
        } else if (_consent1 == 2) {
            consent1 = consent1 +0;
        }
        
        uint consent2;
        if (_consent2 == 1) 
        {
            consent2 = consent2 + 1;
            emit consentDeclarationIssued(msg.sender, "You just accepted a separate property marital property system.");
        } else if (_consent1 == 2) {
            consent1 = consent1 +0;
        }
        
        if (consent1 == loversInvolved || consent2 == loversInvolved)
        {
            currentStatus = statuses.Dating;
            msg.sender.transfer (msg.value);
            emit statusCommitment (msg.sender, currentStatus);
        } else { 
            emit changeStatusFailed (msg.sender, "No change of relationship status verified due to lack of consent."); 
        }
    }       
    
    function payFee () external payable
    {
        lawyer.transfer (address(this).balance);
        emit feesReceived (msg.sender, msg.value, "Legal Fees received. Thank You!");
    }    
    
}
